@use 'variables' as vars;

// Media queries
@mixin respond-to($breakpoint) {
  @if map-has-key(vars.$breakpoints, $breakpoint) {
    @media (min-width: map-get(vars.$breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Unknown breakpoint: #{$breakpoint}";
  }
}

// Flexbox
@mixin flex($direction: row, $justify: flex-start, $align: stretch, $wrap: nowrap) {
  display: flex;
  flex-direction: $direction;
  justify-content: $justify;
  align-items: $align;
  flex-wrap: $wrap;
}

// Typography
@mixin text-style($size: 'base', $weight: 'normal', $color: 'neutral.800') {
  font-size: map-get(vars.$font-sizes, $size);
  font-weight: map-get(vars.$font-weights, $weight);
  color: map-get(map-get(vars.$colors, 'neutral'), $color);
}

// Button styles
@mixin button-base {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: map-get(vars.$spacing, '2') map-get(vars.$spacing, '4');
  border-radius: map-get(vars.$border-radius, 'base');
  font-weight: map-get(vars.$font-weights, 'medium');
  transition: all map-get(vars.$transitions, 'base') ease;
  cursor: pointer;
  border: none;
  outline: none;

  &:focus {
    box-shadow: 0 0 0 3px rgba(map-get(map-get(vars.$colors, 'primary'), 'base'), 0.3);
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

@mixin button-variant($bg-color, $text-color, $hover-bg) {
  background-color: $bg-color;
  color: $text-color;

  &:hover:not(:disabled) {
    background-color: $hover-bg;
  }
}

// Card styles
@mixin card {
  background-color: map-get(map-get(vars.$colors, 'background'), 'base');
  border-radius: map-get(vars.$border-radius, 'lg');
  box-shadow: map-get(vars.$shadows, 'base');
  padding: map-get(vars.$spacing, '6');
}

// Container
@mixin container {
  width: 100%;
  max-width: map-get(vars.$breakpoints, 'xl');
  margin-left: auto;
  margin-right: auto;
  padding-left: map-get(vars.$spacing, '4');
  padding-right: map-get(vars.$spacing, '4');

  @include respond-to('sm') {
    padding-left: map-get(vars.$spacing, '6');
    padding-right: map-get(vars.$spacing, '6');
  }
}

// Transitions
@mixin transition($properties...) {
  $transition-list: ();
  @each $property in $properties {
    $transition-list: append($transition-list, $property map-get(vars.$transitions, 'base') ease, comma);
  }
  transition: $transition-list;
}

// Reset button
@mixin reset-button {
  background: none;
  border: none;
  padding: 0;
  margin: 0;
  font: inherit;
  color: inherit;
  cursor: pointer;
  outline: none;
} 